name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      enable_cleanup:
        description: 'Enable automatic cleanup after 15 minutes'
        required: true
        default: true
        type: boolean

jobs:
  infra:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Install dependencies
        run: npm install

      - name: Run Synth
        run: cdk synth matific-test-app-stack

      - name: View Diff
        run: cdk diff matific-test-app-stack

      - name: Deploy to AWS
        run: cdk deploy matific-test-app-stack --require-approval never

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

  release:
    runs-on: ubuntu-latest
    needs: [infra, build]
    steps:
      - name: Release new version
        run: |
          aws ecs update-service --cluster matific-test-app-ecs-cluster --service matific-test-app-service --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

      - name: Get API Gateway Invoke URL
        run: |
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='matific-test-app-api-gw'].id" --output text)
          
          STAGE_NAME=$(aws apigateway get-stages --rest-api-id $API_ID --query "item[0].stageName" --output text)
          
          INVOKE_URL="https://$API_ID.execute-api.${{ vars.AWS_REGION }}.amazonaws.com/$STAGE_NAME"
          
          echo "::notice title=API Gateway Invoke URL::$INVOKE_URL"
          echo "INVOKE_URL=$INVOKE_URL" >> $GITHUB_ENV
          
          echo "## API Gateway Invoke URL" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Your API is deployed and available at:" >> $GITHUB_STEP_SUMMARY
          echo "**$INVOKE_URL**" >> $GITHUB_STEP_SUMMARY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

  trigger-cleanup:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [release]
    if: ${{ github.event_name == 'push' || github.event.inputs.enable_cleanup == 'true' }}
    steps:
      - name: Trigger cleanup workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-cleanup